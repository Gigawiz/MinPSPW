Index: aminclude.am
===================================================================
--- aminclude.am	(revision 2424)
+++ aminclude.am	(working copy)
@@ -167,7 +167,7 @@
 doxygen-doc: doxygen-run $(DX_PS_GOAL) $(DX_PDF_GOAL)
 
 @DX_DOCDIR@/@PACKAGE@.tag: $(DX_CONFIG) $(pkginclude_HEADERS)
-	rm -rf @DX_DOCDIR@
+#	rm -rf @DX_DOCDIR@
 	$(DX_ENV) $(DX_DOXYGEN) $(srcdir)/$(DX_CONFIG)
 
 DX_CLEANFILES = \
Index: configure.ac
===================================================================
--- configure.ac	(revision 2424)
+++ configure.ac	(working copy)
@@ -66,7 +66,7 @@
 AC_SUBST(PSPSDK_LIBDIR)
 
 # CFLAGS and CXXFLAGS used to build pspsdk libraries.
-PSPSDK_CFLAGS="$CFLAGS -G0 -Wall"
+PSPSDK_CFLAGS="$CFLAGS -G0 -Wall -Werror"
 PSPSDK_CXXFLAGS="$PSPSDK_CFLAGS -fno-exceptions -fno-rtti"
 AC_SUBST(PSPSDK_CFLAGS)
 AC_SUBST(PSPSDK_CXXFLAGS)
Index: src/atrac3/pspatrac3.h
===================================================================
--- src/atrac3/pspatrac3.h	(revision 2424)
+++ src/atrac3/pspatrac3.h	(working copy)
@@ -18,6 +18,53 @@
 extern "C" {
 #endif
 
+/*Error code definition */
+#define PSP_ATRAC_ERROR_PARAM_FAIL              (0x80630001)
+#define PSP_ATRAC_ERROR_API_FAIL                (0x80630002)
+#define PSP_ATRAC_ERROR_NO_ATRACID              (0x80630003)
+#define PSP_ATRAC_ERROR_BAD_CODECTYPE           (0x80630004)
+#define PSP_ATRAC_ERROR_BAD_ATRACID             (0x80630005)
+#define PSP_ATRAC_ERROR_UNKNOWN_FORMAT          (0x80630006)
+#define PSP_ATRAC_ERROR_UNMATCH_FORMAT          (0x80630007)
+#define PSP_ATRAC_ERROR_BAD_DATA                (0x80630008)
+#define PSP_ATRAC_ERROR_ALLDATA_IS_ONMEMORY     (0x80630009)
+#define PSP_ATRAC_ERROR_UNSET_DATA              (0x80630010)
+
+#define PSP_ATRAC_ERROR_READSIZE_IS_TOO_SMALL   (0x80630011)
+#define PSP_ATRAC_ERROR_NEED_SECOND_BUFFER      (0x80630012)
+#define PSP_ATRAC_ERROR_READSIZE_OVER_BUFFER    (0x80630013)
+#define PSP_ATRAC_ERROR_NOT_4BYTE_ALIGNMENT     (0x80630014)
+#define PSP_ATRAC_ERROR_BAD_SAMPLE              (0x80630015)
+#define PSP_ATRAC_ERROR_WRITEBYTE_FIRST_BUFFER  (0x80630016)
+#define PSP_ATRAC_ERROR_WRITEBYTE_SECOND_BUFFER (0x80630017)
+#define PSP_ATRAC_ERROR_ADD_DATA_IS_TOO_BIG     (0x80630018)
+
+#define PSP_ATRAC_ERROR_UNSET_PARAM             (0x80630021)
+#define PSP_ATRAC_ERROR_NONEED_SECOND_BUFFER    (0x80630022)
+#define PSP_ATRAC_ERROR_NODATA_IN_BUFFER        (0x80630023)
+#define PSP_ATRAC_ERROR_ALLDATA_WAS_DECODED     (0x80630024)
+
+/*Audio Codec ID */
+#define PSP_ATRAC_AT3PLUS        (0x00001000)
+#define PSP_ATRAC_AT3            (0x00001001)
+
+/*Remain Frame typical Status */
+#define PSP_ATRAC_ALLDATA_IS_ON_MEMORY             (-1)
+#define PSP_ATRAC_NONLOOP_STREAM_DATA_IS_ON_MEMORY (-2)
+#define PSP_ATRAC_LOOP_STREAM_DATA_IS_ON_MEMORY    (-3)
+
+typedef struct {
+	unsigned char *pucWritePositionFirstBuf;
+	u32 uiWritableByteFirstBuf;
+	u32 uiMinWriteByteFirstBuf;
+	u32 uiReadPositionFirstBuf;
+
+	unsigned char *pucWritePositionSecondBuf;
+	u32 uiWritableByteSecondBuf;
+	u32 uiMinWriteByteSecondBuf;
+	u32 uiReadPositionSecondBuf;
+} SceBufferInfo;
+
 /**
  * Creates a new Atrac ID from the specified data
  *
@@ -29,6 +76,18 @@
 int sceAtracSetDataAndGetID(void *buf, SceSize bufsize);
 
 /**
+ * Sets the specified data to the AtracID
+ *
+ * @param atracID - the atrac ID.
+ * @param buf - the buffer holding the atrac3 data, including the RIFF/WAVE header.
+ * @param bufsize - the size of the buffer pointed by buf
+ *
+ * @returns the new atrac ID, or < 0 on error 
+*/
+int sceAtracSetData(int atracID, void *buf, SceSize bufsize);
+
+
+/**
  * Decode a frame of data. 
  *
  * @param atracID - the atrac ID
@@ -130,8 +189,34 @@
  * @returns < 0 on error, otherwise 0
  *
  */
-int sceAtracGetMaxSample(int atracID, int *outMax); 
+int sceAtracGetMaxSample(int atracID, int *outMax);
 
+int sceAtracGetAtracID(u32 codecType);
+
+int sceAtracGetBufferInfoForReseting(int atracID, u32 sample, SceBufferInfo *bufferInfo);
+
+int sceAtracGetChannel(int atracID, u32 *channel);
+
+int sceAtracGetInternalErrorInfo(int atracID, int *result);
+
+int sceAtracGetLoopStatus(int atracID, int *loopNum, u32 *loopStatus);
+
+int sceAtracGetNextDecodePosition(int atracID, u32 *samplePosition);
+
+int sceAtracGetSecondBufferInfo(int atracID, u32 *position, u32 *dataByte);
+
+int sceAtracGetSoundSample(int atracID, int *endSample, int *loopStartSample, int *loopEndSample);
+
+int sceAtracResetPlayPosition(int atracID, u32 sample, u32 writeByteFirstBuf, u32 writeByteSecondBuf);
+
+int sceAtracSetDataAndGetID(SceUChar8 *pucBufferAddr, u32 bufferByte);
+
+int sceAtracSetHalfwayBuffer(int atracID, void *buf, u32 readByte, u32 bufferByte);
+
+int sceAtracSetHalfwayBufferAndGetID(void *buf, u32 readByte, u32 bufferByte);
+
+int sceAtracSetSecondBuffer(int atracID, void *secondBufferAddr, u32 secondBufferByte);
+
 #ifdef __cplusplus
 }
 #endif
Index: src/ctrl/pspctrl.h
===================================================================
--- src/ctrl/pspctrl.h	(revision 2424)
+++ src/ctrl/pspctrl.h	(working copy)
@@ -103,9 +103,13 @@
 } SceCtrlData;
 
 typedef struct SceCtrlLatch {
+	/**Release -> press transition (start of button press) */
 	unsigned int 	uiMake;
+	/** Press -> Release transition (stop  of button press) */
 	unsigned int 	uiBreak;
+	/** Button state change to pressed */
 	unsigned int 	uiPress;
+	/** Button state change to released */
 	unsigned int 	uiRelease;
 } SceCtrlLatch;
 
@@ -145,8 +149,14 @@
  */
 int sceCtrlGetSamplingMode(int *pmode);
 
+/**
+ * Get controller data (polling, positive logic) .
+ */
 int sceCtrlPeekBufferPositive(SceCtrlData *pad_data, int count);
 
+/**
+ * Get controller data (polling, negative logic) .
+ */
 int sceCtrlPeekBufferNegative(SceCtrlData *pad_data, int count);
 
 /**
@@ -167,10 +177,13 @@
  */
 int sceCtrlReadBufferPositive(SceCtrlData *pad_data, int count);
 
+/** Get controller data (blocking, negative logic) */
 int sceCtrlReadBufferNegative(SceCtrlData *pad_data, int count);
 
+/** Get latched state changes (positive logic) */
 int sceCtrlPeekLatch(SceCtrlLatch *latch_data);
 
+/** Get latched state changes (negative logic) */
 int sceCtrlReadLatch(SceCtrlLatch *latch_data);
 
 /**
Index: src/ctrl/pspctrl_kernel.h
===================================================================
--- src/ctrl/pspctrl_kernel.h	(revision 2424)
+++ src/ctrl/pspctrl_kernel.h	(working copy)
@@ -27,14 +27,14 @@
  *
  * @par Example:
  * @code
- * sceCtrl_driver_7CA723DC(0xFFFF, 1);  // Mask lower 16bits
- * sceCtrl_driver_7CA723DC(0x10000, 2); // Always return HOME key
+ * sceCtrlSetButtonMasks(0xFFFF, 1);  // Mask lower 16bits
+ * sceCtrlSetButtonMasks(0x10000, 2); // Always return HOME key
  * // Do something
- * sceCtrl_driver_7CA723DC(0x10000, 0); // Unset HOME key
- * sceCtrl_driver_7CA723DC(0xFFFF, 0);  // Unset mask
+ * sceCtrlSetButtonMasks(0x10000, 0); // Unset HOME key
+ * sceCtrlSetButtonMasks(0xFFFF, 0);  // Unset mask
  * @endcode
  */
-void sceCtrl_driver_7CA723DC(unsigned int mask, unsigned type);
+void sceCtrlSetButtonMasks(unsigned int mask, unsigned type);
 
 /**
  * Get button mask mode
@@ -43,7 +43,7 @@
  *
  * @return 0 no setting, 1 set in button mask, 2 set in button set
  */
-int sceCtrl_driver_5E77BC8A(unsigned int mask);
+int sceCtrlGetButtonMask(unsigned int mask);
 
 /**
  * Setup a controller callback
@@ -55,14 +55,8 @@
  *
  * @return 0 on success, < 0 on error
  */
-int sceCtrl_driver_5C56C779(int no, unsigned int mask, void (*cb)(int, int, void*), void *arg);
+int sceCtrlRegisterButtonCallback(int no, unsigned int mask, void (*cb)(int, int, void*), void *arg);
 
-/* Just define some random names for the functions to make them easier to use */
-#define sceCtrlSetButtonMasks sceCtrl_driver_7CA723DC
-#define sceCtrlGetButtonMask sceCtrl_driver_5E77BC8A
-#define sceCtrlRegisterButtonCallback sceCtrl_driver_5C56C779
-
-
 #ifdef __cplusplus
 }
 #endif
Index: src/ctrl/sceCtrl_driver.S
===================================================================
--- src/ctrl/sceCtrl_driver.S	(revision 2424)
+++ src/ctrl/sceCtrl_driver.S	(working copy)
@@ -69,13 +69,13 @@
 	IMPORT_FUNC	"sceCtrl_driver",0x6841BE1A,sceCtrlSetRapidFire
 #endif
 #ifdef F_sceCtrl_driver_0021
-	IMPORT_FUNC	"sceCtrl_driver",0x7CA723DC,sceCtrl_driver_7CA723DC
+	IMPORT_FUNC	"sceCtrl_driver",0x7CA723DC,sceCtrlSetButtonMasks
 #endif
 #ifdef F_sceCtrl_driver_0022
-	IMPORT_FUNC	"sceCtrl_driver",0x5E77BC8A,sceCtrl_driver_5E77BC8A
+	IMPORT_FUNC	"sceCtrl_driver",0x5E77BC8A,sceCtrlGetButtonMask
 #endif
 #ifdef F_sceCtrl_driver_0023
-	IMPORT_FUNC	"sceCtrl_driver",0x5C56C779,sceCtrl_driver_5C56C779
+	IMPORT_FUNC	"sceCtrl_driver",0x5C56C779,sceCtrlRegisterButtonCallback
 #endif
 #ifdef F_sceCtrl_driver_0024
 	IMPORT_FUNC	"sceCtrl_driver",0xA7144800,sceCtrlSetIdleCancelThreshold
Index: src/debug/scr_printf.c
===================================================================
--- src/debug/scr_printf.c	(revision 2424)
+++ src/debug/scr_printf.c	(working copy)
@@ -356,6 +356,9 @@
 		c = buff[i];
 		switch (c)
 		{
+			case '\r':
+						X = 0;
+						break;
 			case '\n':
 						X = 0;
 						Y ++;
Index: src/display/pspdisplay.h
===================================================================
--- src/display/pspdisplay.h	(revision 2424)
+++ src/display/pspdisplay.h	(working copy)
@@ -19,6 +19,10 @@
 extern "C" {
 #endif
 
+#define PSP_DISPLAY_MODE_LCD		0
+#define PSP_DISPLAY_MODE_VESA1A		0x1A
+#define PSP_DISPLAY_MODE_PSEUDO_VGA	0x60
+
 /** Framebuffer pixel formats. */
 enum PspDisplayPixelFormats {
 	/** 16-bit RGB 5:6:5. */
@@ -83,10 +87,10 @@
  *
  * @return 0 on success
  */
-int sceDisplaySetFrameBuf(void *topaddr, int bufferwidth, int pixelformat, int sync);
+int sceDisplaySetFrameBuf(const void *topaddr, int bufferwidth, int pixelformat, int sync);
 
 /**
- * Get Display Framebuffer information
+ * Get Display Framebuffer information (base address and pixel format)
  *
  * @param topaddr - pointer to void* to receive address of start of framebuffer
  * @param bufferwidth - pointer to int to receive buffer width (must be power of 2)
@@ -95,7 +99,7 @@
  *
  * @return 0 on success
  */
-int sceDisplayGetFrameBuf(void **topaddr, int *bufferwidth, int *pixelformat, int sync);
+int sceDisplayGetFrameBuf(const void **topaddr, int *bufferwidth, int *pixelformat, int sync);
 
 /**
  * Number of vertical blank pulses up to now
@@ -122,6 +126,29 @@
  */
 int sceDisplayWaitVblankCB(void);
 
+/**
+ * Get accumlated HSYNC count 
+ */
+int sceDisplayGetAccumulatedHcount(void);
+
+/**
+ * Get current HSYNC count 
+ */
+int sceDisplayGetCurrentHcount(void);
+
+/** Get number of frames per second */
+float sceDisplayGetFramePerSec(void);
+
+/**
+ * Get whether or not frame buffer is being displayed
+ */
+int sceDisplayIsForeground(void);
+
+/**
+ * Test whether VBLANK is active
+ */
+int sceDisplayIsVblank(void);
+
 #ifdef __cplusplus
 }
 #endif
Index: src/ge/pspge.h
===================================================================
--- src/ge/pspge.h	(revision 2424)
+++ src/ge/pspge.h	(working copy)
@@ -39,6 +39,14 @@
 	void *finish_arg;
 } PspGeCallbackData;
 
+/** Display list issuing options */
+typedef struct PspGeListOptParam {
+	/** sizeof(PspGeListOptParam) */
+	unsigned int size;
+	/** context save area */
+	PspGeContext *context;
+} PspGeListOptParam;
+
 /**
  * Get the size of VRAM.
  *
@@ -117,11 +125,11 @@
   * @param stall - The stall address.
   * If NULL then no stall address set and the list is transferred immediately.
   * @param cbid - ID of the callback set by calling sceGeSetCallback
-  * @param arg - Probably a parameter to the callbacks (to be confirmed)
+  * @param opt - a PspGeListOptParam to the callbacks (to be confirmed)
   *
   * @return The ID of the queue.
   */
-int sceGeListEnQueue(const void *list, void *stall, int cbid, void *arg);
+int sceGeListEnQueue(const void *list, const void *stall, int cbid, PspGeListOptParam *opt);
 
 /**
   * Enqueue a display list at the head of the GE display list queue.
@@ -130,11 +138,11 @@
   * @param stall - The stall address.
   * If NULL then no stall address set and the list is transferred immediately.
   * @param cbid - ID of the callback set by calling sceGeSetCallback
-  * @param arg - Probably a parameter to the callbacks (to be confirmed)
+  * @param arg - a PspGeListOptParam to the callbacks (to be confirmed)
   *
   * @return The ID of the queue.
   */
-int sceGeListEnQueueHead(const void *list, void *stall, int cbid, void *arg);
+int sceGeListEnQueueHead(const void *list, const void *stall, int cbid, PspGeListOptParam *opt);
 
 /**
  * Cancel a queued or running list.
@@ -153,7 +161,7 @@
   *
   * @return Unknown. Probably 0 if successful.
   */
-int sceGeListUpdateStallAddr(int qid, void *stall);
+int sceGeListUpdateStallAddr(int qid, const void *stall);
 
 
 /** Wait condition for ::sceGeListSync() and ::sceGeDrawSync(). */
@@ -200,6 +208,28 @@
   */
 int sceGeUnsetCallback(int cbid);
 
+/**
+ * Drawing queue interruption parameter 
+ */
+typedef struct SceGeBreakParam {
+	unsigned int	buf[4];
+} SceGeBreakParam;
+
+/** 
+ * Interrupt drawing queue 
+ */
+int sceGeBreak(int mode, SceGeBreakParam *pParam);
+
+/** 
+ * Restart drawing queue 
+ */
+int sceGeContinue(void);
+
+/** 
+ * Set Graphics Engine eDRAM address translation mode 
+ */
+int sceGeEdramSetAddrTranslation(int iWidth);
+
 #ifdef __cplusplus
 }
 #endif
Index: src/gu/pspgu.h
===================================================================
--- src/gu/pspgu.h	(revision 2424)
+++ src/gu/pspgu.h	(working copy)
@@ -429,7 +429,7 @@
 **/
 void sceGuTerm(void);
 
-void sceGuBreak(int a0);
+void sceGuBreak(int cid);
 void sceGuContinue(void);
 
 /**
@@ -455,7 +455,7 @@
   * @param signal - Signal to trigger
   * @param behavior - Behavior type
 **/
-void sceGuSignal(int signal, int behavior);
+void sceGuSignal(int signal, unsigned short behavior);
 
 /**
   * Send raw float-command to the GE
@@ -530,7 +530,7 @@
   * @param id - Finish callback id (16-bit)
   * @returns Size of finished display list
 **/
-int sceGuFinishId(unsigned int id);
+int sceGuFinishId(unsigned short id);
 
 /**
   * Call previously generated display-list
@@ -723,7 +723,7 @@
   *
   * @param status - Bit-mask (0-21) containing the status of all 22 states
 **/
-void sceGuSetAllStatus(int status);
+void sceGuSetAllStatus(unsigned int status);
 
 /**
   * Query status on all 22 available states
@@ -977,7 +977,7 @@
 **/
 void sceGuBlendFunc(int op, int src, int dest, unsigned int srcfix, unsigned int destfix);
 
-void sceGuMaterial(int mode, int color);
+void sceGuMaterial(int mode, unsigned int color);
 
 /**
   *
@@ -1285,7 +1285,7 @@
   * This will stall the rendering pipeline until the current image upload initiated by
   * sceGuCopyImage() has completed.
 **/
-void sceGuTexSync();
+void sceGuTexSync(void);
 
 /**
   * Set if the texture should repeat or clamp
Index: src/gu/sceGuFinish.c
===================================================================
--- src/gu/sceGuFinish.c	(revision 2424)
+++ src/gu/sceGuFinish.c	(working copy)
@@ -44,7 +44,7 @@
 	return size;
 }
 
-int sceGuFinishId(unsigned int id)
+int sceGuFinishId(unsigned short id)
 {
 	switch (gu_curr_context)
 	{
Index: src/gu/sceGuMaterial.c
===================================================================
--- src/gu/sceGuMaterial.c	(revision 2424)
+++ src/gu/sceGuMaterial.c	(working copy)
@@ -8,7 +8,7 @@
 
 #include "guInternal.h"
 
-void sceGuMaterial(int mode, int color)
+void sceGuMaterial(int mode, unsigned int color)
 {
 	if (mode & 0x01)
 	{
Index: src/gu/sceGuSendList.c
===================================================================
--- src/gu/sceGuSendList.c	(revision 2424)
+++ src/gu/sceGuSendList.c	(working copy)
@@ -16,18 +16,17 @@
 {
 	gu_settings.signal_offset = 0;
 
-	// TODO: figure out this structure
-	unsigned int s[2];
-	s[0] = 8; // size of struct?
-	s[1] = (unsigned int)context;
+	PspGeListOptParam opt;
+	opt.size = sizeof(PspGeListOptParam);
+	opt.context = context;
 
 	int list_id = 0;
 	int callback = gu_settings.ge_callback_id;
 
 	switch (mode)
 	{
-		case GU_HEAD: list_id = sceGeListEnQueueHead(list,0,callback,s); break;
-		case GU_TAIL: list_id = sceGeListEnQueue(list,0,callback,s); break;
+		case GU_HEAD: list_id = sceGeListEnQueueHead(list,0,callback,&opt); break;
+		case GU_TAIL: list_id = sceGeListEnQueue(list,0,callback,&opt); break;
 	}
 
 	ge_list_executed[1] = list_id;
Index: src/gu/sceGuSetAllStatus.c
===================================================================
--- src/gu/sceGuSetAllStatus.c	(revision 2424)
+++ src/gu/sceGuSetAllStatus.c	(working copy)
@@ -8,7 +8,7 @@
 
 #include "guInternal.h"
 
-void sceGuSetAllStatus(int status)
+void sceGuSetAllStatus(unsigned int status)
 {
 	unsigned int i;
 	for (i = 0; i < 22; ++i)
Index: src/gu/sceGuSignal.c
===================================================================
--- src/gu/sceGuSignal.c	(revision 2424)
+++ src/gu/sceGuSignal.c	(working copy)
@@ -8,7 +8,7 @@
 
 #include "guInternal.h"
 
-void sceGuSignal(int signal, int argument)
+void sceGuSignal(int signal, unsigned short argument)
 {
 	sendCommandi(14,((signal & 0xff) << 16) | (argument & 0xffff));
 	sendCommandi(12,0);
Index: src/kernel/pspimpose_driver.h
===================================================================
--- src/kernel/pspimpose_driver.h	(revision 2424)
+++ src/kernel/pspimpose_driver.h	(working copy)
@@ -38,6 +38,9 @@
 #define PSP_IMPOSE_UMD_POPUP_ENABLED 1
 #define PSP_IMPOSE_UMD_POPUP_DISABLED 0
 
+#define	PSP_IMPOSE_BATTICON_NONE		0x80000000
+#define	PSP_IMPOSE_BATTICON_BLINK		0x00000001
+
 /**
  * Fetch the value of an Impose parameter.
  *
@@ -135,6 +138,15 @@
  */
 int sceImposeCheckVideoOut(int* value);
 
+/**
+ * Check for the Battery Icon.
+ *
+ * @param status - battery status
+ * @return < 0 on error
+ *
+ */
+int sceImposeGetBatteryIconStatus(int *value, int *indicator);
+
 #ifdef __cplusplus
 }
 #endif
Index: src/mpeg/pspmpeg.h
===================================================================
--- src/mpeg/pspmpeg.h	(revision 2424)
+++ src/mpeg/pspmpeg.h	(working copy)
@@ -20,6 +20,12 @@
 extern "C" {
 #endif
 
+/* Stream types */
+#define		PSP_MPEG_STREAM_M4AVC		0		/* MPEG4 AVC video stream */
+#define		PSP_MPEG_STREAM_ATRAC		1		/* ATRAC3plus stream */
+#define		PSP_MPEG_STREAM_PCM         2		/* PCM data */
+#define		PSP_MPEG_STREAM_AUDIO       15		/* ATRAC3plus or PCM */
+
 /** points to "LIBMPEG" */
 typedef ScePVoid SceMpeg;
 
@@ -35,13 +41,13 @@
 	SceInt32			iPackets;
 
     /** unknown */
-	SceUInt32			iUnk0;
+	SceUInt32			iRpos;
     /** unknown */
-	SceUInt32			iUnk1;
+	SceUInt32			iWpos;
     /** unknown */
-	SceUInt32			iUnk2;
+	SceUInt32			iInlen;
     /** unknown */
-	SceUInt32			iUnk3;
+	SceUInt32			iTypeSize;
 
     /** pointer to data */
 	ScePVoid			pData;
Index: src/prof/prof.c
===================================================================
--- src/prof/prof.c	(revision 2424)
+++ src/prof/prof.c	(working copy)
@@ -79,7 +79,8 @@
 extern int _etext;
 
 /* forward declarations */
-void gprof_cleanup();
+void gprof_cleanup(void);
+void __mcount(unsigned int, unsigned int);
 static SceUInt timer_handler(SceUID uid, SceKernelSysClock *c1, SceKernelSysClock *c2, void *common);
 
 /** Initializes pg library
Index: src/umd/sceUmd.S
===================================================================
--- src/umd/sceUmd.S	(revision 2424)
+++ src/umd/sceUmd.S	(working copy)
@@ -6,106 +6,106 @@
 	IMPORT_START	"sceUmd",0x00090000
 #endif
 #ifdef F_sceUmd_0001
-	IMPORT_FUNC	"sceUmd",0x075F1E0B,sceUmd_075F1E0B
+	IMPORT_FUNC	"sceUmd",0x075F1E0B,sceUmd_075F1E0B
 #endif
 #ifdef F_sceUmd_0002
-	IMPORT_FUNC	"sceUmd",0x086DDC0D,sceUmd_086DDC0D
+	IMPORT_FUNC	"sceUmd",0x086DDC0D,sceUmd_086DDC0D
 #endif
 #ifdef F_sceUmd_0003
-	IMPORT_FUNC	"sceUmd",0x230666E3,sceUmdSetDriveStatus
+	IMPORT_FUNC	"sceUmd",0x230666E3,sceUmdSetDriveStatus
 #endif
 #ifdef F_sceUmd_0004
-	IMPORT_FUNC	"sceUmd",0x27A764A1,sceUmd_27A764A1
+	IMPORT_FUNC	"sceUmd",0x27A764A1,sceUmd_27A764A1
 #endif
 #ifdef F_sceUmd_0005
-	IMPORT_FUNC	"sceUmd",0x2D81508D,sceUmd_2D81508D
+	IMPORT_FUNC	"sceUmd",0x2D81508D,sceUmd_2D81508D
 #endif
 #ifdef F_sceUmd_0006
-	IMPORT_FUNC	"sceUmd",0x319ED97C,sceUmd_319ED97C
+	IMPORT_FUNC	"sceUmd",0x319ED97C,sceUmd_319ED97C
 #endif
 #ifdef F_sceUmd_0007
-	IMPORT_FUNC	"sceUmd",0x340B7686,sceUmdGetDiscInfo
+	IMPORT_FUNC	"sceUmd",0x340B7686,sceUmdGetDiscInfo
 #endif
 #ifdef F_sceUmd_0008
-	IMPORT_FUNC	"sceUmd",0x3925CBD8,sceUmd_3925CBD8
+	IMPORT_FUNC	"sceUmd",0x3925CBD8,sceUmd_3925CBD8
 #endif
 #ifdef F_sceUmd_0009
-	IMPORT_FUNC	"sceUmd",0x3D0DECD5,sceUmd_3D0DECD5
+	IMPORT_FUNC	"sceUmd",0x3D0DECD5,sceUmd_3D0DECD5
 #endif
 #ifdef F_sceUmd_0010
-	IMPORT_FUNC	"sceUmd",0x46EBB729,sceUmdCheckMedium
+	IMPORT_FUNC	"sceUmd",0x46EBB729,sceUmdCheckMedium
 #endif
 #ifdef F_sceUmd_0011
-	IMPORT_FUNC	"sceUmd",0x4832ABF3,sceUmd_4832ABF3
+	IMPORT_FUNC	"sceUmd",0x4832ABF3,sceUmd_4832ABF3
 #endif
 #ifdef F_sceUmd_0012
-	IMPORT_FUNC	"sceUmd",0x4A9E5E29,sceUmdWaitDriveStatCB
+	IMPORT_FUNC	"sceUmd",0x4A9E5E29,sceUmdWaitDriveStatCB
 #endif
 #ifdef F_sceUmd_0013
-	IMPORT_FUNC	"sceUmd",0x4BA25F4A,sceUmd_4BA25F4A
+	IMPORT_FUNC	"sceUmd",0x4BA25F4A,sceUmd_4BA25F4A
 #endif
 #ifdef F_sceUmd_0014
-	IMPORT_FUNC	"sceUmd",0x4C952ACF,sceUmdSetSuspendResumeMode
+	IMPORT_FUNC	"sceUmd",0x4C952ACF,sceUmdSetSuspendResumeMode
 #endif
 #ifdef F_sceUmd_0015
-	IMPORT_FUNC	"sceUmd",0x5469DC37,sceUmd_5469DC37
+	IMPORT_FUNC	"sceUmd",0x5469DC37,sceUmd_5469DC37
 #endif
 #ifdef F_sceUmd_0016
-	IMPORT_FUNC	"sceUmd",0x56202973,sceUmdWaitDriveStatWithTimer
+	IMPORT_FUNC	"sceUmd",0x56202973,sceUmdWaitDriveStatWithTimer
 #endif
 #ifdef F_sceUmd_0017
-	IMPORT_FUNC	"sceUmd",0x659587F7,sceUmd_659587F7
+	IMPORT_FUNC	"sceUmd",0x659587F7,sceUmd_659587F7
 #endif
 #ifdef F_sceUmd_0018
-	IMPORT_FUNC	"sceUmd",0x6A41ED25,sceUmdGetSuspendResumeMode
+	IMPORT_FUNC	"sceUmd",0x6A41ED25,sceUmdGetSuspendResumeMode
 #endif
 #ifdef F_sceUmd_0019
-	IMPORT_FUNC	"sceUmd",0x6AF9B50A,sceUmd_6AF9B50A
+	IMPORT_FUNC	"sceUmd",0x6AF9B50A,sceUmdCancelWaitDriveStat
 #endif
 #ifdef F_sceUmd_0020
-	IMPORT_FUNC	"sceUmd",0x71F81482,sceUmd_71F81482
+	IMPORT_FUNC	"sceUmd",0x71F81482,sceUmd_71F81482
 #endif
 #ifdef F_sceUmd_0021
-	IMPORT_FUNC	"sceUmd",0x7850F057,sceUmd_7850F057
+	IMPORT_FUNC	"sceUmd",0x7850F057,sceUmd_7850F057
 #endif
 #ifdef F_sceUmd_0022
-	IMPORT_FUNC	"sceUmd",0x87533940,sceUmdReplaceProhibit
+	IMPORT_FUNC	"sceUmd",0x87533940,sceUmdReplaceProhibit
 #endif
 #ifdef F_sceUmd_0023
-	IMPORT_FUNC	"sceUmd",0x8EF08FCE,sceUmdWaitDriveStat
+	IMPORT_FUNC	"sceUmd",0x8EF08FCE,sceUmdWaitDriveStat
 #endif
 #ifdef F_sceUmd_0024
-	IMPORT_FUNC	"sceUmd",0x9B22AED7,sceUmd_9B22AED7
+	IMPORT_FUNC	"sceUmd",0x9B22AED7,sceUmd_9B22AED7
 #endif
 #ifdef F_sceUmd_0025
-	IMPORT_FUNC	"sceUmd",0xAE53DC2D,sceUmdClearDriveStatus
+	IMPORT_FUNC	"sceUmd",0xAE53DC2D,sceUmdClearDriveStatus
 #endif
 #ifdef F_sceUmd_0026
-	IMPORT_FUNC	"sceUmd",0xAEE7404D,sceUmdRegisterUMDCallBack
+	IMPORT_FUNC	"sceUmd",0xAEE7404D,sceUmdRegisterUMDCallBack
 #endif
 #ifdef F_sceUmd_0027
-	IMPORT_FUNC	"sceUmd",0xBBB5F05C,sceUmd_BBB5F05C
+	IMPORT_FUNC	"sceUmd",0xBBB5F05C,sceUmd_BBB5F05C
 #endif
 #ifdef F_sceUmd_0028
-	IMPORT_FUNC	"sceUmd",0xBD2BDE07,sceUmdUnRegisterUMDCallBack
+	IMPORT_FUNC	"sceUmd",0xBD2BDE07,sceUmdUnRegisterUMDCallBack
 #endif
 #ifdef F_sceUmd_0029
-	IMPORT_FUNC	"sceUmd",0xC6183D47,sceUmdActivate
+	IMPORT_FUNC	"sceUmd",0xC6183D47,sceUmdActivate
 #endif
 #ifdef F_sceUmd_0030
-	IMPORT_FUNC	"sceUmd",0xCBE9F02A,sceUmdReplacePermit
+	IMPORT_FUNC	"sceUmd",0xCBE9F02A,sceUmdReplacePermit
 #endif
 #ifdef F_sceUmd_0031
-	IMPORT_FUNC	"sceUmd",0xD01B2DC6,sceUmd_D01B2DC6
+	IMPORT_FUNC	"sceUmd",0xD01B2DC6,sceUmd_D01B2DC6
 #endif
 #ifdef F_sceUmd_0032
-	IMPORT_FUNC	"sceUmd",0xD45D1FE6,sceUmdGetDriveStatus
+	IMPORT_FUNC	"sceUmd",0xD45D1FE6,sceUmdGetDriveStatus
 #endif
 #ifdef F_sceUmd_0033
-	IMPORT_FUNC	"sceUmd",0xE83742BA,sceUmdDeactivate
+	IMPORT_FUNC	"sceUmd",0xE83742BA,sceUmdDeactivate
 #endif
 #ifdef F_sceUmd_0034
-	IMPORT_FUNC	"sceUmd",0xEB56097E,sceUmd_EB56097E
+	IMPORT_FUNC	"sceUmd",0xEB56097E,sceUmd_EB56097E
 #endif
 #ifdef F_sceUmd_0035
 	IMPORT_FUNC	"sceUmd",0xF8352373,sceUmd_F8352373
Index: src/user/sceImpose.S
===================================================================
--- src/user/sceImpose.S	(revision 2424)
+++ src/user/sceImpose.S	(working copy)
@@ -24,7 +24,7 @@
 	IMPORT_FUNC	"sceImpose",0x72189C48,sceImposeSetUMDPopup
 #endif
 #ifdef F_sceImpose_0007
-	IMPORT_FUNC	"sceImpose",0x8C943191,sceImposeBatteryIconStatus
+	IMPORT_FUNC	"sceImpose",0x8C943191,sceImposeGetBatteryIconStatus
 #endif
 #ifdef F_sceImpose_0008
 	IMPORT_FUNC	"sceImpose",0x8F6E3518,sceImposeGetBacklightOffTime
Index: src/vsh/scePaf.S
===================================================================
--- src/vsh/scePaf.S	(revision 2424)
+++ src/vsh/scePaf.S	(working copy)
@@ -1803,13 +1803,13 @@
 	IMPORT_FUNC	"scePaf",0xFBC76D05,sce_png_read
 #endif
 #ifdef F_scePaf_0600
-	IMPORT_FUNC	"scePaf",0xC6A8BEE2,scePaf_C6A8BEE2
+	IMPORT_FUNC	"scePaf",0xC6A8BEE2,sceCccDecodeUTF8
 #endif
 #ifdef F_scePaf_0601
-	IMPORT_FUNC	"scePaf",0x8406F469,scePaf_8406F469
+	IMPORT_FUNC	"scePaf",0x8406F469,sceCccEncodeUTF16
 #endif
 #ifdef F_scePaf_0602
-	IMPORT_FUNC	"scePaf",0xB4D1CBBF,scePaf_B4D1CBBF
+	IMPORT_FUNC	"scePaf",0xB4D1CBBF,sceCccSetTable
 #endif
 #ifdef F_scePaf_0603
 	IMPORT_FUNC	"scePaf",0x8D3EAEA3,scePaf_8D3EAEA3
@@ -1827,19 +1827,19 @@
 	IMPORT_FUNC	"scePaf",0x8D736C8F,scePaf_8D736C8F
 #endif
 #ifdef F_scePaf_0608
-	IMPORT_FUNC	"scePaf",0xE0CF8091,scePaf_E0CF8091
+	IMPORT_FUNC	"scePaf",0xE0CF8091,sceCccDecodeUTF16
 #endif
 #ifdef F_scePaf_0609
-	IMPORT_FUNC	"scePaf",0xBEB47224,scePaf_BEB47224
+	IMPORT_FUNC	"scePaf",0xBEB47224,sceCccSJIStoUTF16
 #endif
 #ifdef F_scePaf_0610
-	IMPORT_FUNC	"scePaf",0xD9392CCB,scePaf_D9392CCB
+	IMPORT_FUNC	"scePaf",0xD9392CCB,sceCccStrlenSJIS
 #endif
 #ifdef F_scePaf_0611
-	IMPORT_FUNC	"scePaf",0xF1B73D12,scePaf_F1B73D12
+	IMPORT_FUNC	"scePaf",0xF1B73D12,sceCccUTF16toSJIS
 #endif
 #ifdef F_scePaf_0612
-	IMPORT_FUNC	"scePaf",0x00D1378F,scePaf_00D1378F
+	IMPORT_FUNC	"scePaf",0x00D1378F,sceCccUTF8toUTF16
 #endif
 #ifdef F_scePaf_0613
 	IMPORT_FUNC	"scePaf",0xD6CDB3BB,scePaf_D6CDB3BB
@@ -1854,13 +1854,13 @@
 	IMPORT_FUNC	"scePaf",0xB9383A25,scePaf_B9383A25
 #endif
 #ifdef F_scePaf_0617
-	IMPORT_FUNC	"scePaf",0xB7D3C112,scePaf_B7D3C112
+	IMPORT_FUNC	"scePaf",0xB7D3C112,sceCccStrlenUTF8
 #endif
 #ifdef F_scePaf_0618
-	IMPORT_FUNC	"scePaf",0x4BDEB2A8,scePaf_4BDEB2A8
+	IMPORT_FUNC	"scePaf",0x4BDEB2A8,sceCccStrlenUTF16
 #endif
 #ifdef F_scePaf_0619
-	IMPORT_FUNC	"scePaf",0x41B724A5,scePaf_41B724A5
+	IMPORT_FUNC	"scePaf",0x41B724A5,sceCccUTF16toUTF8
 #endif
 #ifdef F_scePaf_0620
 	IMPORT_FUNC	"scePaf",0xD5F3BAB1,scePaf_D5F3BAB1
@@ -1971,30 +1971,39 @@
 	IMPORT_FUNC	"scePaf",0xE357380E,scePaf_E357380E
 #endif
 #ifdef F_scePaf_0656
+	/* same hash as sceGuDisable */
 	IMPORT_FUNC	"scePaf",0x4B4F39FC,scePaf_4B4F39FC
 #endif
 #ifdef F_scePaf_0657
+	/* same hash as sceGuShadeModel */
 	IMPORT_FUNC	"scePaf",0x5C5F727C,scePaf_5C5F727C
 #endif
 #ifdef F_scePaf_0658
+	/* same hash as sceGuColor */
 	IMPORT_FUNC	"scePaf",0x0F2615A4,scePaf_0F2615A4
 #endif
 #ifdef F_scePaf_0659
+	/* same hash as sceGumDrawArray */
 	IMPORT_FUNC	"scePaf",0xEA4C24B3,scePaf_EA4C24B3
 #endif
 #ifdef F_scePaf_0660
+	/* same hash as sceGumPopMatrix */
 	IMPORT_FUNC	"scePaf",0x28C54317,scePaf_28C54317
 #endif
 #ifdef F_scePaf_0661
+	/* same hash as sceGumPushMatrix */
 	IMPORT_FUNC	"scePaf",0xCBA9AAB1,scePaf_CBA9AAB1
 #endif
 #ifdef F_scePaf_0662
+	/* same hash as sceGumRotateZ */
 	IMPORT_FUNC	"scePaf",0x2C5D3E63,scePaf_2C5D3E63
 #endif
 #ifdef F_scePaf_0663
+	/* same hash as sceGumScale */
 	IMPORT_FUNC	"scePaf",0x38316A7D,scePaf_38316A7D
 #endif
 #ifdef F_scePaf_0664
+	/* same hash as sceGumTranslate */
 	IMPORT_FUNC	"scePaf",0x96610AE6,scePaf_96610AE6
 #endif
 #ifdef F_scePaf_0665
Index: tools/psp-config.c
===================================================================
--- tools/psp-config.c	(revision 2424)
+++ tools/psp-config.c	(working copy)
@@ -1,3 +1,6 @@
+#if defined(__MINGW32__) && !defined(__CYGWIN__)
+#include <windows.h>
+#endif
 #include <stdio.h>
 #include <getopt.h>
 #include <string.h>
@@ -259,9 +262,24 @@
 
 int main(int argc, char **argv)
 {
+#if defined(__MINGW32__) && !defined(__CYGWIN__)
+	// this will store the fully-qualified path
+	char psp_config_path[MAX_PATH] = "";
+
+	// fetch the path of the executable
+	if(GetModuleFileName(0, psp_config_path, sizeof(psp_config_path) - 1) == 0)
+	{
+		// fall back
+		strcpy(psp_config_path, argv[0]);
+	}
+#endif
 	if(process_args(argc, argv))
 	{
+#if defined(__MINGW32__) && !defined(__CYGWIN__)
+		print_path(psp_config_path);
+#else
 		print_path(argv[0]);
+#endif
 	}
 	else
 	{
